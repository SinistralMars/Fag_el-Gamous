// <auto-generated />
using System;
using Fag_el_Gamous.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Fag_el_Gamous.Migrations.Burial
{
    [DbContext(typeof(BurialContext))]
    [Migration("20230414073748_AddPrimaryKeyToNewTable")]
    partial class AddPrimaryKeyToNewTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.excelimporter$template_nr_mxseq", "'excelimporter$template_nr_mxseq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.system$filedocument_fileid_mxseq", "'system$filedocument_fileid_mxseq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.system$queuedtask_sequence_mxseq", "'system$queuedtask_sequence_mxseq', '', '1', '1', '', '', 'Int64', 'False'");

            modelBuilder.Entity("Fag_el_Gamous.Models.NewTable", b =>
                {
                    b.Property<string>("Adultsubadult")
                        .HasColumnName("adultsubadult")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Ageatdeath")
                        .HasColumnName("ageatdeath")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Area")
                        .HasColumnName("area")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("Burialid")
                        .HasColumnName("burialid")
                        .HasColumnType("bigint");

                    b.Property<string>("Burialmaterials")
                        .HasColumnName("burialmaterials")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Burialnumber")
                        .HasColumnName("burialnumber")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Clusternumber")
                        .HasColumnName("clusternumber")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ColorValue")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Dataexpertinitials")
                        .HasColumnName("dataexpertinitials")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Dateofexcavation")
                        .HasColumnName("dateofexcavation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Depth")
                        .HasColumnName("depth")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Eastwest")
                        .HasColumnName("eastwest")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("Estimatestature")
                        .HasColumnName("estimatestature")
                        .HasColumnType("integer");

                    b.Property<string>("Excavationrecorder")
                        .HasColumnName("excavationrecorder")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Facebundles")
                        .HasColumnName("facebundles")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Fieldbookexcavationyear")
                        .HasColumnName("fieldbookexcavationyear")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Fieldbookpage")
                        .HasColumnName("fieldbookpage")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Goods")
                        .HasColumnName("goods")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Hair")
                        .HasColumnName("hair")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Haircolor")
                        .HasColumnName("haircolor")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Headdirection")
                        .HasColumnName("headdirection")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Length")
                        .HasColumnName("length")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Northsouth")
                        .HasColumnName("northsouth")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Photos")
                        .HasColumnName("photos")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Preservation")
                        .HasColumnName("preservation")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Samplescollected")
                        .HasColumnName("samplescollected")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Sex")
                        .HasColumnName("sex")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Shaftnumber")
                        .HasColumnName("shaftnumber")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Southtofeet")
                        .HasColumnName("southtofeet")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Southtohead")
                        .HasColumnName("southtohead")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Squareeastwest")
                        .HasColumnName("squareeastwest")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Squarenorthsouth")
                        .HasColumnName("squarenorthsouth")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("StructureValue")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("TextileFunctionValue")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Westtofeet")
                        .HasColumnName("westtofeet")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Westtohead")
                        .HasColumnName("westtohead")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Wrapping")
                        .HasColumnName("wrapping")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.ToTable("new_table");
                });
#pragma warning restore 612, 618
        }
    }
}
